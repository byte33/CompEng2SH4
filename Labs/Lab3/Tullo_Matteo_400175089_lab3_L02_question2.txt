//Matteo Tullo
//tullom
//400175089

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct { //Student structure
    int id;
    char firstName[16];
    char lastName[16];
    int proj1Grade;
    int proj2Grade;
    float finalGrade;
}   Student;

Student **create_class_list(char *filename, int *sizePtr);
int find(int idNo, Student **list, int size);
void input_grades(char *filename, Student **list, int size);
void compute_final_course_grades(Student **list, int size);
void output_final_course_grades(Student **list, int size);
void print_list(Student **list, int size);
void withdraw(int idNo, Student **list, int *sizePtr);
void destroy_list(Student **list, int *sizePtr);

int main(void) 
{
    char filename[13] = "students.txt";
    char filename2 [11] = "grades.txt";
    int siz;
    char *filenameP = filename; //pointer to students
    char *filenameP2 = filename2; //pointer to grades
    int *size = &siz;


    Student **classList = create_class_list(filenameP,size);

    int f = find(4005,classList,*size);
    //f < 0 ? printf("Number was not found\n") : printf("Number was found at index %d\n",f);

    input_grades(filenameP2, classList, *size);
    // printf("\n%d", classList[1]->proj2Grade);

    compute_final_course_grades(classList, *size);
    // printf("\n%f", classList[2]->finalGrade);

    output_final_course_grades(classList, *size);
    // print_list(classList, *size);   

    withdraw(4004, classList, size);
    //print_list(classList, *size);

    destroy_list(classList,size);
    // print_list(classList, *size);

    return 0;
}


Student **create_class_list(char *filename, int *sizePtr)
{
    FILE *input_file = fopen(filename,"r"); //initialize file

    fscanf(input_file,"%d",sizePtr);  //read num of students

    Student **classList = calloc((*sizePtr),(sizeof(Student *))); //allocate size for pointers to students
    for (int i=0;i<(*sizePtr);i++) {classList[i] = calloc(1,sizeof(Student));} //allocate size for students

    for (int i=0;i<(*sizePtr);i++) { //scan for id and name
        fscanf(input_file,"%d",&classList[i]->id);
        fscanf(input_file,"%s",classList[i]->firstName);
        fscanf(input_file,"%s",classList[i]->lastName);
    }

    fclose(input_file);
    return classList;
}

int find(int idNo, Student **list, int size)
{
    for (int i=0;i<size;i++) {
        if (idNo == list[i]->id) {return i;} //loop thru all the things and checks if the input exists and return the index
    }

    return -1; //if not return -1
}

void input_grades(char *filename, Student **list, int size)
{
    FILE *input_file = fopen(filename,"r"); //open file
    int num;
    
    for (int i=0;i<size;i++) {
        int counter = 0;
        fscanf(input_file,"%d",&num); //get id
        while (num != list[counter]->id) { //search for id in list
            if (counter>1000) {printf("id not found");}
            counter++;
        }
        fscanf(input_file,"%d %d",&list[counter]->proj1Grade,&list[counter]->proj2Grade); //once identified, add grades
    }
    fclose(input_file);
}

void compute_final_course_grades(Student **list, int size)
{
    float av;
    for (int i=0;i<size;i++) { //loop thru all students
        av = (list[i]->proj1Grade + list[i]->proj2Grade)/2.00; //calculate the average
        list[i]->finalGrade = av; //set it
    }
}

void output_final_course_grades(Student **list, int size) 
{
    FILE *output_file = fopen("output.txt","w"); //open file for writing
    fprintf(output_file,"%d\n",size);
    
    for (int i=0;i<size;i++) {
        fprintf(output_file,"%d %f\n",list[i]->id,list[i]->finalGrade); //write the id and final grade
    }

    fclose(output_file);
}

void print_list(Student **list, int size)
{
    for (int i=0;i<size;i++) { //loop thru each student and print its info
    printf("ID: %d, Name: %s %s, Proj 1 Grade: %d, Proj 2 Grade: %d, Final Grade: %f\n",
            list[i]->id,list[i]->firstName,list[i]->lastName,list[i]->proj1Grade,list[i]->proj2Grade,list[i]->finalGrade);
    }
}

void withdraw(int idNo, Student **list, int *sizePtr) 
{
    int index = find(idNo,list,*sizePtr); //find the id we want
    if (index==-1) {printf("Invalid Entry\n");return;} //if it returns -1, it didnt exist and return to main

    free(list[index]); //free that index

    for (int i=index; i<(*sizePtr-1);i++) {
        list[i] = list[i+1]; //move the pointers to the right
    }

    *sizePtr=*sizePtr-1; //decrease size
}

void destroy_list(Student **list, int *sizePtr) 
{
    free(list); //free all the info in the list
}